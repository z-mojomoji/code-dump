(function(e, t) {
    function n(e) {
    this.container=e;
    this.run();
}
n.prototype.run=function() {
    this.handles=this.parseHandles(this.container.find("[data-fd-handle]"));
    var t=[], n=[], r=this;
    this.container.find("[data-fd-rules]").each(function() {
    (r.ruleValidator(r.handles, e(this).data("fdRules"))?t: n).push(this);
}
);
    e(t).show();
    e(n).hide();
}
;
    n.prototype.parseHandles=function(n) {
    var r= {
}
;
    n.each(function() {
    var n=e(this);
    if(n.is(": checkbox,  :radio")&&!n.prop("checked")) {
    return true;
}
var i=n.data("fdHandle");
    (t.has(r, i)?r[i]: r[i]=[]).push(n.val());
}
);
    return r;
}
;
    n.prototype.ruleValidator=function(e, n) {
    return t.every(n, function(n) {
    var r=n.match(/^(\w+?): ((?:!)?)(\w+?)(?::(.*))?$/);
    if(!t.has(e, r[1])) {
    return r[2]?true: false;
}
var i;
    switch(r[3]) {
    case"equal": i=t.indexOf(e[r[1]], r[4])!==-1;
    break;
    case"regex": i=RegExp.prototype.test.call(new RegExp(r[4]), e[r[1]]);
    break;
    case"checked": default:i=true;
}
return r[2]?!i:i;
});
};
    e.fn.mthemeFieldDependency=function(r) {
    var i=arguments;
    return this.each(function() {
    var s=e(this), o=s.data("mtheme.fielddependency");
    if(t.isString(r)&&!o) {
    console.log("calling method %s before initialization", r);
}
else if(t.isString(r)&&o) {
    t.isFunction(o[r])&&o[r](Array.prototype.slice.call(i, 1));
}
else if(!o) {
    s.data("mtheme.fielddependency", o=new n(s));
}
});
}})(jQuery, _)